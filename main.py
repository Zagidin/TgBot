import asyncio
import sqlite3

from random import choice, shuffle
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardButton
from aiogram.types import ChatActions


db = sqlite3.connect('zagura_bot.db')
cursor = db.cursor()

cursor.execute(
    """CREATE TABLE IF NOT EXISTS users (
           id INTEGER PRIMARY KEY, 
           username TEXT, 
           lovegenres TEXT
    )
""")

db.commit()
db.close()


storage = MemoryStorage()

bot = Bot(token='6595000010:AAFNnPSbdi6C8HjrTnlbAWu1p5okdh5EHeo')
dp = Dispatcher(bot, storage=storage)

datas = {
    None
}


class Registration(StatesGroup):
    name = State()
    love_genres = State()


class Anagramma(StatesGroup):
    user_word = State()


@dp.message_handler(commands=['start'])
async def start(message: types.Message):

    await message.reply(
        f"üëã –ü—Ä–∏–≤–µ—Ç @{message.from_user.username}!\n"
        f"\n–≠—Ç–æ –ú–∏–Ω–∏-–ë–æ—Ç << Zagura >>\n"
        f"\n–ß—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å —á—Ç–æ —è —É–º–µ—é\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ /help üë®‚Äçüè´"
    )


@dp.message_handler(commands=['help'])
async def help_bot(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é üìù'))
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –ë–æ—Ç << Zagura >>\n"
        f"\n–î–ª—è –Ω–∞—á–∞–ª–∞ –í–∞—Å –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç–∏—Ä–æ–≤–∞—Ç—å\n"
        f"–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –±—ã–ª–æ —É–¥–æ–±–Ω–æ ‚úèüóí"
        f"\n\n–î–ª—è –Ω–∞—á–∞–ª—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /registration üìù"
        f"\n\n–ò–ª–∏ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ—è–≤–∏–ª–∞—Å—å –≤–Ω–∏–∑—É üõéÔ∏è",
        reply_markup=keyboard
    )

    await message.answer(
        "–í—ã –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å –ø–æ–º–æ—â—å –±–æ—Ç–∞\n–ù–∞–ø–∏—Å–∞–≤ /help.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –ø—Ä–æ–ø–∏—Å–∞–Ω—ã –≤ –ú–ï–ù–Æ –∫–æ–º–∞–Ω–¥, —á—Ç–æ–±—ã –µ—ë –æ—Ç–∫—Ä—ã—Ç—å\n"
        "–ø—Ä–æ–ø–∏—à–∏—Ç–µ << / >> - –°–ª–µ—à\n\n1) –í—ã–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ª—é–¥–µ–π:\n/compare"
        "\n\n2) –í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É:\n/play_game"
        "\n\n3) –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:\n/registration\n\n"
        "P. S. –í–æ –≤—Ä–µ–º—è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n–≤ –∫–æ–Ω—Ü–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /save"
    )


# ---------------------------- –†–µ–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è --------------------------------


@dp.message_handler(commands=['registration'])
async def registration_bot(message: types.Message) -> None:
    await message.answer(
        "–ö–∞–∫, –í–∞—Å –∑–æ–≤—É—Ç? üòä",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await Registration.name.set()


@dp.message_handler(content_types=['text'], state=Registration.name)
async def name_polzovatel(message: types.Message, state: FSMContext) -> None:

    async with state.proxy() as data:
        data['name'] = message.text

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –í–∞—à–∏ –ª—é–±–∏–º—ã–µ –∂–∞–Ω—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏ –ø—Ä–æ–±–µ–ª üòú")
    await Registration.next()


@dp.message_handler(content_types=['text'], state=Registration.love_genres)
async def love_genres_polzovat(message: types.Message, state: FSMContext) -> None:

    global datas

    async with state.proxy() as data:
        data['love_genres'] = message.text.lower()

        datas = {
            '–ò–º—è': data['name'],
            '–õ—é–±–∏–º—ã–µ –∂–∞–Ω—Ä—ã': data['love_genres']
        }

    await message.answer("üìù")
    await message.answer("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å! ‚ù§Ô∏è‚Äçüî•")
    await message.answer(
        text=f'–ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞\t<b><i>/save</i></b> üìå\n'
        f'\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ\n'
        f'–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ \t/registration üìùüóëÔ∏è'
             f'\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è /help',
        parse_mode='HTML'
    )

    await state.finish()


@dp.message_handler(lambda message: message.text == '–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é üìù')
async def send_message(message: types.Message):
    await message.answer('–ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç? üòä', reply_markup=types.ReplyKeyboardRemove())
    await Registration.name.set()


@dp.message_handler(state=Registration.name)
async def process_name(message: types.Message, state: FSMContext):

    async with state.proxy() as data:
        data['name'] = message.text

    await message.answer('–í–≤–µ–¥–∏—Ç–µ –¢–†–ò (3) –ª—é–±–∏–º—ã—Ö –∂–∞–Ω—Ä–∞ üòú')

    await Registration.next()


@dp.message_handler(state=Registration.love_genres)
async def process_love_genres(message: types.Message, state: FSMContext):

    global datas

    async with state.proxy() as data:
        data['love_genres'] = message.text.lower()

        datas = {
            '–ò–º—è': data['name'],
            '–õ—é–±–∏–º—ã–µ –∂–∞–Ω—Ä—ã': data['love_genres']
        }

    await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! ‚ù§Ô∏è‚Äçüî•')

    await state.finish()

# ------------------------- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ–ª–∏–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö ----------------------


@dp.message_handler(commands=['save'])
async def user_data(message: types.Message):

    conn = sqlite3.connect('zagura_bot.db')
    cursors = conn.cursor()

    await message.answer(f"–î–∞–Ω–Ω—ã–µ üóí\n\n\t–ò–º—è ü™™ :\n{datas['–ò–º—è']}\n\n–õ—é–±–∏–º—ã–µ –∂–∞–Ω—Ä—ã üí¨ :\n{datas['–õ—é–±–∏–º—ã–µ –∂–∞–Ω—Ä—ã']}")

    name = datas['–ò–º—è']
    love_genres = datas['–õ—é–±–∏–º—ã–µ –∂–∞–Ω—Ä—ã']

    cursors.execute(
        """INSERT INTO users (username, lovegenres) VALUES (?, ?)""",
        (name, love_genres)
    )

    conn.commit()
    conn.close()

# ------------------------------- –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ ( –∂–∞–Ω—Ä–æ–≤ ) ----------------------------


def transform_dict_format(input_data):
    result = {}
    for entry in input_data:
        name, *rest = entry
        elements = [el for el in rest if el]
        result[name] = elements
    return dict(result)


def convert_to_sets(input_dict):
    result = {key: set(value) for key, value in input_dict.items()}
    return result


def print_dict_on_separate_lines(input_dict):
    output = ""
    for key, value in input_dict.items():
        output += f"{key}: {value}\n"
    return output


def find_names_with_same_values(input_dict):
    result = {}
    for key, value in input_dict.items():
        value_tuple = tuple(value)
        if value_tuple not in result:
            result[value_tuple] = []
        result[value_tuple].append(key)

    names_with_same_values = {value: names for value, names in result.items() if len(names) > 1}
    return names_with_same_values


@dp.message_handler(commands=['compare'])
async def compare(message: types.Message):
    conn = sqlite3.connect('zagura_bot.db')
    cursors = conn.cursor()

    cursors.execute("""SELECT username, lovegenres FROM users""")
    users = cursors.fetchall()
    conn.close()

    transformed_data = transform_dict_format(users)

    converted_data = convert_to_sets(transformed_data)

    print_polzovalet_all = print_dict_on_separate_lines(converted_data)
    otstup = '\n'
    await message.answer(f"–í–æ—Ç –í–µ—Å—å —Å–ø–∏—Å–æ–∫ –ª—é–¥–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ –∂–∞–Ω—Ä–∞–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤, "
                         f"–ø–æ—Å–º–æ—Ä–∏—Ç–µ —É –∫–æ–≥–æ —Å–æ–≤–ø–∞–¥–∞—é—Ç –∏–Ω—Ç–µ—Ä–µ—Å—ã —Å –í–∞–º–∏\n"
                         f"\n{print_polzovalet_all}")

    # print(converted_data)
    result = find_names_with_same_values(converted_data)
    # print("–ò–º–µ–Ω–∞ —Å —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏:", result)
    await message.answer(f"–í–æ—Ç –õ—é–¥–∏ —É –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–≤–ø–∞–¥–∞—é—Ç –ñ–∞–Ω—Ä—ã ( –ò–Ω—Ç–µ—Ä–µ—Å—ã )\n\n{result}")

# --------------------------------- –ò–≥—Ä—ã ----------------------------------------------


@dp.message_handler(commands=['play_game'])
async def play_game(message: types.Message):

    keyboards = ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = InlineKeyboardButton(text='–°–∫—Ä–∞–±–ª üî†')
    btn2 = InlineKeyboardButton(text='–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã ü¶ä')
    btn3 = InlineKeyboardButton(text='–ê–Ω–∞–≥—Ä–∞–º–º—ã üé≠')
    btn4 = InlineKeyboardButton(text='–ü–µ–Ω–∞–ª—å—Ç–∏ ‚öΩ')
    btn5 = InlineKeyboardButton(text='–ë–∞—Å–∫–µ—Ç–±–æ–ª–ª üèÄ')
    btn6 = InlineKeyboardButton(text='–ë–æ—É–ª–∏–Ω–≥ üé≥')
    keyboards.row(btn1, btn3)
    keyboards.add(btn2)
    keyboards.add(btn5)
    keyboards.row(btn6, btn4)

    await message.answer(
        f"@{message.from_user.username} "
        f"–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–≥—Ä—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–Ω—ã—Ö —Å–Ω–∏–∑—É üòâ",
        reply_markup=keyboards
    )

# ------------- –ò–≥—Ä–∞ –ê–Ω–∞–≥—Ä–∞–º–º–∞ ------------
word_bot = ''

# -------------- –ò–≥—Ä–∞ –°–∫—Ä–∞–±–ª --------------
dictionary = {
    'apple',
    'banana',
    'cherry',
    'grape',
    'orange',
    'kiwi',
    'lemon',
    'melon',
    'pear',
    'plum'
}

game_state = {
    'current_word': '',
    'current_player': None,
    'scores': {}
}


@dp.message_handler(lambda message: message.text)
async def send_message(message: types.Message):

    global word_bot

    if message.text == '–ê–Ω–∞–≥—Ä–∞–º–º—ã üé≠':

        words = ['Priora', '–®–∫–æ–ª–∞', 'Python', '–°—Ç–∞—Ä—Ç', 'Aiogram', '–ê–Ω–∞–≥—Ä–∞–º–º–∞', 'import']

        await message.reply("–ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ, —è –ø—Ä–∏–¥—É–º—ã–≤–∞—é —Å–ª–æ–≤–æ!")

        await bot.send_chat_action(
            message.chat.id,
            ChatActions.TYPING
        )
        await asyncio.sleep(3.5)

        word = choice(words)
        word_bot += word

        await message.answer(
            f"–í—Å—ë, —è –ó–∞–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ ‚úç \n\n"
            f"–ü–æ—Å–º–æ—Ä–∏—à—å —Ç–æ–≥–¥–∞ –∫–æ–≥–¥–∞ —Å–¥–∞—à—å—Å—è ü´° "
            f"\n<tg-spoiler>ü´µüëÅ\n{word}</tg-spoiler>",
            parse_mode='HTML'
        )

        word_shuffled = list(word)
        shuffle(word_shuffled)
        shuffled_word = ''.join(word_shuffled)

        await message.answer(f"–í–æ—Ç –ê–Ω–æ–≥—Ä–∞–º–º–∞: "
                             f"\n\n\t{shuffled_word}\n\n"
                             f"–£–≥–∞–¥–∞–π —á—Ç–æ-–∑–∞ —Å–ª–æ–≤–æ —è –∑–∞–≥–∞–¥–∞–ª –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ"
                             f"\n–£–¥–∞—á–∏!")
        await Anagramma.user_word.set()

    elif message.text == '–°–∫—Ä–∞–±–ª üî†':

        game_state['current_player'] = message.from_user.id
        game_state['current_word'] = ''
        game_state['scores'][message.from_user.id] = 0

        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É! –ù–∞—á–Ω–µ–º —Å –≤–∞—Å. –ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ:")

    elif message.text == '–ü–µ–Ω–∞–ª—å—Ç–∏ ‚öΩ':
        await message.answer_dice("‚öΩ")
    elif message.text == '–ë–∞—Å–∫–µ—Ç–±–æ–ª–ª üèÄ':
        await message.answer_dice("üèÄ")
    elif message.text == '–ë–æ—É–ª–∏–Ω–≥ üé≥':
        await message.answer_dice("üé≥")
    else:
        await message.answer("–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ :)")


# ------------------------------------- –ò–≥—Ä–∞ –ê–Ω–∞–≥—Ä–∞–º–º–∞ ----------------------------------


@dp.message_handler(state=Anagramma.user_word)
async def anagram(message: types.Message, state: FSMContext):

    global word_bot

    async with state.proxy() as data:
        data['user_word'] = message.text

    if data['user_word'] == word_bot:
        await message.answer("–í—ã –≤–µ—Ä–Ω–æ —É–≥–∞–¥–∞–ª–∏!")
        await state.finish()
        word_bot = ''

    elif data['user_word'].lower() == '—Å—Ç–æ–ø':
        await state.finish()

        word_bot = ''

        gif = open('GIF/Otmena.gif', 'rb')
        await message.reply_animation(animation=gif)

        await message.answer("–ú–æ–∂–µ—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∏–≥—Ä—É ü§ñ\n\n   /help - –ü–æ–º–æ—â—å")

    else:
        await message.answer(
            f"–ù–µ–≤–µ—Ä–Ω–æ, —è —Ç–∞–∫–æ–≥–æ –Ω–µ –∑–∞–≥–∞–¥—ã–≤–∞–ª!\n"
            f"\n–ù–∞–ø–∏—à–∏—Ç–µ   ==  <b><u><code>–°—Ç–æ–ø</code></u></b>  ==   —á—Ç–æ–±—ã –í—ã–π—Ç–∏",
            parse_mode='HTML'
        )


# ---------------------------------- –ò–≥—Ä–∞ –°–∫—Ä–∞–±–ª -----------------------------------


@dp.message_handler()
async def process_word(message: types.Message):
    word = message.text.lower()
    if word in dictionary and message.from_user.id == game_state['current_player']:
        game_state['current_word'] = word
        game_state['scores'][game_state['current_player']] += len(word)
        await message.answer(
            f"–•–æ—Ä–æ—à–æ! –°–ª–æ–≤–æ –ø—Ä–∏–Ω—è—Ç–æ. "
            f"–í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –æ—á–∫–æ: {game_state['scores'][game_state['current_player']]}")
    else:
        await message.answer("–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
